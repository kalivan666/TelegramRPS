@page "/"

@using TelegramRPS.ClientWasm.Services
@using TelegramRPS.ClientWasm.Shared
@using TelegramRPS.Shared.Models.Game
@using Microsoft.AspNetCore.Components

@inject TelegramInterop TelegramInterop
@inject TelegramAuthService TelegramAuthService
@inject UserProfileService UserProfileService
@inject GameHubService GameHubService
@inject NavigationManager NavigationManager

@if (UserProfileService.CurrentUserProfile != null)
{
    <TelegramUserInfo />

    <div class="main-menu-container">
        <img src="images/logo.png" alt="Логотип" class="main-logo" />
        <h1 class="main-title">Добро пожаловать в Дурак</h1>
        <p class="main-subtitle">Классическая русская карточная игра</p>
        <div class="buttons-container">
            <button class="create-game-button" @onclick="CreateGameAsync">
                <img src="images/CreateGame.svg" alt="Создать игру" width="20" height="20" />
                Создать игру
            </button>
            <button class="join-game-button">
                <img src="images/JoinGame.svg" alt="Присоединиться" width="20" height="20" />
                Присоединиться к игре
            </button>

            <button class="profile-button" @onclick="GoToProfile">
                <img src="images/MyProfile.svg" alt="Профиль" width="20" height="20" />
                Мой профиль
            </button>

            <div class="stats-summary">
                <span>Игр сыграно: @UserProfileService.CurrentUserProfile.GameStats.GamesPlayed</span>
                <span class="dot">•</span>
                <span>Побед: @UserProfileService.CurrentUserProfile.GameStats.Wins</span>
                <span class="dot">•</span>
                <span>Рейтинг: @UserProfileService.CurrentUserProfile.GameStats.Rating</span>
            </div>
        </div>
    </div>
}
else
{
    <TelegramAuthRequired />
}

@code {
    [CascadingParameter]
    public MainLayout MainLayoutInstance { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (TelegramAuthService.CurrentTelegramUser == null)
        {
            var data = await TelegramInterop.GetTelegramUserDataAsync();
            if (data?.User != null)
            {
                await TelegramAuthService.SetTelegramUser(data.User);
                await UserProfileService.AuthenticateAsync(
                    TelegramAuthService.CurrentTelegramUser.Id,
                    TelegramAuthService.CurrentTelegramUser.FirstName,
                    TelegramAuthService.CurrentTelegramUser.LastName,
                    TelegramAuthService.CurrentTelegramUser.Username,
                    TelegramAuthService.CurrentTelegramUser.PhotoUrl
                );
            }
        }
    }

    private async Task GoToProfile()
    {
        if (MainLayoutInstance != null)
            await MainLayoutInstance.NavigateWithAnimation("/profile");
        else
            NavigationManager.NavigateTo("/profile");
    }

    private async Task CreateGameAsync()
    {
        var userId = TelegramAuthService.CurrentTelegramUser?.Id ?? (long)0;
        var gameId = await GameHubService.CreateGame(userId);
        if (gameId != Guid.Empty)
        {
            NavigationManager.NavigateTo($"/lobby/{gameId}");
        }
    }
}