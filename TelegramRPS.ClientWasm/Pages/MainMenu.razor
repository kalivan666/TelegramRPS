@page "/"

@using System.Text.Json
@using System.Text.Json.Serialization
@using TelegramRPS.ClientWasm.Services
@using TelegramRPS.ClientWasm.Shared
@using TelegramRPS.Shared.Models.DTO
@using TelegramRPS.Shared.Models.Game
@using Microsoft.AspNetCore.Components
@using static TelegramRPS.Shared.Models.Game.GameEnums

@inject TelegramInterop TelegramInterop
@inject TelegramAuthService TelegramAuthService
@inject UserProfileService UserProfileService
@inject NavigationManager NavigationManager
@inject HttpClient Http

@if (IsLoading)
{
    <p>Загрузка...</p>
}
else if (!IsAuthorized)
{
    <TelegramAuthRequired />
}
else
{
    <TelegramUserInfo />

    <div class="main-menu-container">
        <img src="images/logo.png" alt="Логотип" class="main-logo" />
        <h1 class="main-title">Добро пожаловать в Дурак</h1>
        <p class="main-subtitle">Классическая русская карточная игра</p>
        <div class="buttons-container">
            <button class="create-game-button" @onclick="CreateGameAsync">
                <img src="images/CreateGame.svg" alt="Создать игру" width="20" height="20" />
                Создать игру
            </button>
            <button class="join-game-button" @onclick="GoToRooms">
                <img src="images/JoinGame.svg" alt="Присоединиться" width="20" height="20" />
                Присоединиться к игре
            </button>

            <button class="profile-button" @onclick="GoToProfile">
                <img src="images/MyProfile.svg" alt="Профиль" width="20" height="20" />
                Мой профиль
            </button>

            <div class="stats-summary">
                <span>Игр сыграно: @UserProfileService.CurrentUserProfile.GameStats.GamesPlayed</span>
                <span class="dot">•</span>
                <span>Побед: @UserProfileService.CurrentUserProfile.GameStats.Wins</span>
                <span class="dot">•</span>
                <span>Рейтинг: @UserProfileService.CurrentUserProfile.GameStats.Rating</span>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public MainLayout MainLayoutInstance { get; set; } = null!;

    private bool IsAuthorized = false;
    private bool IsLoading = false;
    private int? CurrentUserId = null;

    protected override async Task OnInitializedAsync()
    {
        if (TelegramAuthService.CurrentTelegramUser == null)
        {
            var data = await TelegramInterop.GetTelegramUserDataAsync();
            if (data?.User != null)
            {
                await TelegramAuthService.SetTelegramUser(data.User);
                await UserProfileService.AuthenticateAsync(
                    TelegramAuthService.CurrentTelegramUser.Id,
                    TelegramAuthService.CurrentTelegramUser.FirstName,
                    TelegramAuthService.CurrentTelegramUser.LastName,
                    TelegramAuthService.CurrentTelegramUser.Username,
                    TelegramAuthService.CurrentTelegramUser.PhotoUrl
                );
            }
        }

        CurrentUserId = UserProfileService.CurrentUserProfile?.Id;

        // Если не авторизован — показываем компонент авторизации через Telegram
        if (CurrentUserId == null)
        {
            IsAuthorized = false;
            IsLoading = false;
            return;
        }

        IsAuthorized = true;
        IsLoading = false;
    }


    private async Task GoToProfile()
    {
        if (MainLayoutInstance != null)
            await MainLayoutInstance.NavigateWithAnimation("/profile");
        else
            NavigationManager.NavigateTo("/profile");
    }

    private async Task GoToRooms()
    {
        if (MainLayoutInstance != null)
            await MainLayoutInstance.NavigateWithAnimation("/rooms");
        else
            NavigationManager.NavigateTo("/rooms");
    }

    private async Task CreateGameAsync()
    {
        var userId = UserProfileService.CurrentUserProfile.Id;

        var request = new CreateLobbyRequest
            {
                UserProfileId = userId,
                DisplayName = UserProfileService.CurrentUserProfile.DisplayName,
                PhotoUrl = UserProfileService.CurrentUserProfile.AvatarUrl,
                Mode = GameMode.Classic,
                Deck = DeckType.TrhirtySix,
                MaxPlayers = 2
            };

        var response = await Http.PostAsJsonAsync("api/lobby/create", request);

        if (response.IsSuccessStatusCode)
        {
            var options = new JsonSerializerOptions
            {
                Converters = { new JsonStringEnumConverter() },
                PropertyNameCaseInsensitive = true // <-- ВАЖНО
            };


            var json = await response.Content.ReadAsStringAsync();
            var lobby = JsonSerializer.Deserialize<TelegramRPS.Shared.Models.Game.GameLobby>(json, options);

            if (MainLayoutInstance != null)
            {
                Console.WriteLine("[DEBUG] Navigating with animation...");
                await MainLayoutInstance.NavigateWithAnimation($"/lobby/{lobby!.Id}");
            }
            else
            {
                Console.WriteLine("[DEBUG] Navigating with NavigationManager...");
                NavigationManager.NavigateTo($"/lobby/{lobby!.Id}");
            }
        }
        else
        {
            Console.WriteLine($"[ERROR] Failed to create lobby. Status code: {response.StatusCode}");
        }
    }
}