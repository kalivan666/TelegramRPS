@page "/lobby/{LobbyId:int}"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.SignalR.Client
@using TelegramRPS.ClientWasm.Services
@using TelegramRPS.ClientWasm.Shared
@using TelegramRPS.Shared.Models.Game
@using TelegramRPS.Shared.Models.Profile
@using static TelegramRPS.Shared.Models.Game.GameEnums
@inject HttpClient Http
@inject UserProfileService UserProfileService
@inject TelegramAuthService TelegramAuthService
@inject TelegramInterop TelegramInterop
@inject NavigationManager NavigationManager

@implements IAsyncDisposable

<div class="lobby-container">
    @if (IsLoading)
    {
        <p>Загрузка...</p>
    }
    else if (!IsAuthorized)
    {
        <TelegramAuthRequired />
    }
    else
    {
        <div class="lobby-table-outer">
            <div class="lobby-table-inner">

                <!--заголовок лобби-->
                <header class="lobby-header">
                    @if (IsAdmin)
                    {
                        <button class="settings-text-button" @onclick="OpenSettings">⚙</button>
                        <div class="room-label">Комната #@lobby.Id</div>
                    }
                    else
                    {
                        <div class="room-label room-label--alone">Комната #@lobby.Id</div>
                    }
                    <button class="btn-leave" @onclick="LeaveLobby">Покинуть</button>
                </header>

                <!--выдвижная панель снизу-->
                <div class="slide-up-panel">
                    <div class="user-info">
                        <img class="avatar" src="@UserProfileService.CurrentUserProfile.AvatarUrl" alt="avatar" />
                        <div class="name-status">
                            <div class="nickname">@UserProfileService.CurrentUserProfile.DisplayName</div>
                            <div class="readiness">
                                <div class="status-dot" style="background-color:@StatusColor"></div>
                                <div class="status-text">@StatusText</div>
                            </div>
                        </div>
                    </div>
                    <button class="@ButtonClass" @onclick="() => ToggleReady()">@ButtonText</button>
                    <div class="waiting-panel">
                        <div class="waiting-text">Ожидание игроков<span class="dots"></span></div>
                        <div class="max-players">Максимум @lobby.MaxPlayers @(lobby.MaxPlayers >= 5 ? "игроков" : "игрока"), все должны быть готовы</div>
                    </div>

                </div>

                <!--создание карточек игроков-->
                <div class="lobby-cards-container">
                    @{
                        int slotIndex = 0;
                        foreach (var player in lobby.Players)
                        {
                            if (player.UserProfileId == CurrentUserId)
                                continue;

                            <div class="player-card" style="@GetCardPositionStyle(slotIndex)">
                                <div class="icon-wrapper">
                                    <img class="avatar" src="@player.PhotoUrl" />
                                </div>
                                <div class="nickname">@player.DisplayName</div>
                                <div class="readiness-indicator">
                                    <div class="dot" style="background:@GetStatusColor(player.IsReady);"></div>
                                    <div class="ready-text">@GetStatusText(player.IsReady)</div>
                                </div>
                            </div>

                            slotIndex++;
                        }

                        for (int i = slotIndex; i < lobby.MaxPlayers - 1; i++)
                        {
                            <div class="player-card empty" style="@GetCardPositionStyle(i)">
                                <div class="icon-wrapper">
                                    <div class="question-mark">?</div>
                                </div>
                                <div>Ожидание...</div>
                            </div>
                        }
                    }

                    <div class="player-card current-user-card">
                        <img class="avatar" src="@UserProfileService.CurrentUserProfile.AvatarUrl" />
                        <div class="nickname">@UserProfileService.CurrentUserProfile.DisplayName</div>
                    </div>
                </div>
            </div>
        </div>

        @if (_isSettingsModalVisible)
        {
            <div class="modal-overlay" @onclick="CancelEdit">
                <div class="settings-modal-content @( _isClosing ? "modalFadeOut" : "" )" @onclick:stopPropagation>
                    <div class="modal-title">Настройки лобби</div>

                    <div class="settings-section">
                        <div class="section-title">Режим игры</div>
                        <div class="mode-buttons">

                            <button class="mode-button @(settingSelectedMode == GameMode.Classic ? "selected" : "")"
                            @onclick='() => SelectMode(GameMode.Classic)'>
                                <div class="mode-icon">
                                    <img src="images/SettingsLobby/classic.svg" alt="Классический" width="32" height="32" />
                                </div>
                                <div class="mode-label">Классический</div>
                            </button>

                            <button class="mode-button @(settingSelectedMode == GameMode.Transferable ? "selected" : "")"
                            @onclick='() => SelectMode(GameMode.Transferable)'>
                                <div class="mode-icon">
                                    <img src="images/SettingsLobby/transfer.svg" alt="Переводной" width="32" height="32" />
                                </div>
                                <div class="mode-label">Переводной</div>
                            </button>
                        </div>
                    </div>

                    <div class="settings-section">
                        <div class="section-title">Кол-во карт</div>
                        <div class="cards-buttons">
                            <button class="cards-button @(settingSetectedDect == DeckType.TwentyFour ? "selected" : "")"
                            @onclick='() => SelectCardCount(DeckType.TwentyFour)'>
                                <div class="cards-icon">
                                    <img src="images/SettingsLobby/24.svg" alt="24 карты" width="32" height="32" />
                                </div>
                                <div class="cards-label">24 карты</div>
                            </button>

                            <button class="cards-button @(settingSetectedDect == DeckType.TrhirtySix ? "selected" : "")"
                            @onclick='() => SelectCardCount(DeckType.TrhirtySix)'>
                                <div class="cards-icon">
                                    <img src="images/SettingsLobby/36.svg" alt="36 карт" width="32" height="32" />
                                </div>
                                <div class="cards-label">36 карт</div>
                            </button>
                        </div>
                    </div>

                    <div class="settings-section">
                        <div class="section-title">Игроки</div>
                        <div class="players-section">
                            <input type="range"
                            min="2" max="6"
                            value="@settingSelectedMaxPlayers"
                            class="players-slider"
                            style="background: @SliderBackground;"
                            @oninput="OnSliderChange" />
                            <div class="players-value @(valueBump ? "bump" : "")">@settingSelectedMaxPlayers</div>
                        </div>
                    </div>

                    <div class="settings-modal-buttons">
                        <button class="btn-cancel" @onclick="CancelEdit">Отмена</button>
                        <button class="btn-save" @onclick="SaveSettings">Сохранить</button>
                    </div>
                </div>
            </div>
        }
    }
</div>

@code {
    [Parameter] public int LobbyId { get; set; }
    [CascadingParameter]
    public MainLayout MainLayoutInstance { get; set; } = null!;

    private HubConnection? _hubConnection;

    private bool _isSettingsModalVisible = false;
    private bool _isClosing = false;

    private int? CurrentUserId = null;
    private bool IsAuthorized = false;
    private bool IsAdmin = false;
    private bool IsLoading = true;

    private GameMode settingSelectedMode;
    private DeckType settingSetectedDect;
    private int settingSelectedMaxPlayers;

    bool valueBump = false;

    private GameLobby? lobby;

    private bool IsReady = false;

    private string StatusText => IsReady ? "Готов" : "Не готов";
    private string StatusColor => IsReady ? "#238636" : "#8B949E";
    private string ButtonText => IsReady ? "Не готов" : "Готов";
    private string ButtonClass => IsReady ? "ready-button ready" : "ready-button";

    private string GetStatusColor(bool isReady) => isReady ? "#238636" : "#8B949E";

    private string GetStatusText(bool isReady) => isReady ? "Готов" : "Не готов";

    private async Task ToggleReady()
    {
        IsReady = !IsReady;
        var player = lobby.Players.First(p => p.UserProfileId == CurrentUserId);

        await _hubConnection.SendAsync("UpdateLobbyUserReady", lobby.Id, player.UserProfileId, IsReady);
    }

    private string GetCardPositionStyle(int index)
    {
        var positions = new (string left, string top)[] { };

        if(lobby.MaxPlayers == 2)
            return $"position:fixed; left:36.5%; top:10%;";

        else if (lobby.MaxPlayers == 3)
        {
            positions = new (string left, string top)[]
            {
                ("5", "10"),
                ("68", "10"),
            };

            var pos = positions[index];
            return $"position:fixed; left:{pos.left}%; top:{pos.top}%;";
        }
        else if (lobby.MaxPlayers == 4)
        {
            positions = new (string left, string top)[]
            {
                ("5", "10"),
                ("68", "10"),
                ("36.5", "10"),
            };

            var pos = positions[index];
            return $"position:fixed; left:{pos.left}%; top:{pos.top}%;";
        }
        else if (lobby.MaxPlayers == 5)
        {
            positions = new (string left, string top)[]
            {
                ("5", "10"),
                ("68", "10"),
                ("5", "67"),
                ("68", "67"),
            };

            var pos = positions[index];
            return $"position:fixed; left:{pos.left}%; top:{pos.top}%;";
        }
        else
        {
            positions = new (string left, string top)[]
            {
            ("5", "10"),
            ("68", "10"),
            ("36.5", "10"),
            ("5", "67"),
            ("68", "67"),
            };

            var pos = positions[index];
            return $"position:fixed; left:{pos.left}%; top:{pos.top}%;";
        }
    }


    protected override async Task OnInitializedAsync()
    {
        if (UserProfileService.CurrentUserProfile == null)
        {
            var data = await TelegramInterop.GetTelegramUserDataAsync();
            if (data?.User != null)
            {
                await TelegramAuthService.SetTelegramUser(data.User);
                await UserProfileService.AuthenticateAsync(
                    TelegramAuthService.CurrentTelegramUser.Id,
                    TelegramAuthService.CurrentTelegramUser.FirstName,
                    TelegramAuthService.CurrentTelegramUser.LastName,
                    TelegramAuthService.CurrentTelegramUser.Username,
                    TelegramAuthService.CurrentTelegramUser.PhotoUrl
                );
            }
        }

        CurrentUserId = UserProfileService.CurrentUserProfile?.Id;

        // Если не авторизован — показываем компонент авторизации через Telegram
        if (CurrentUserId == null)
        {
            IsAuthorized = false;
            IsLoading = false;
            return;
        }

        IsAuthorized = true;

        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

        lobby = await Http.GetFromJsonAsync<GameLobby>($"api/lobby/{LobbyId}", options);

        if (lobby == null)
        {
            if (MainLayoutInstance != null)
                await MainLayoutInstance.NavigateWithAnimation("/");
            else
                NavigationManager.NavigateTo("/");
            return;
        }

        settingSelectedMode = lobby.Mode;
        settingSetectedDect = lobby.Deck;
        settingSelectedMaxPlayers = lobby.MaxPlayers;

        // Проверяем есть ли пользователь в списке игроков лобби
        if (!lobby.Players.Any(p => p.UserProfileId == CurrentUserId))
        {
            if (lobby.Players.Count == lobby.MaxPlayers)
            {
                if (MainLayoutInstance != null)
                    await MainLayoutInstance.NavigateWithAnimation("/");
                else
                    NavigationManager.NavigateTo("/");
                return;
            }
            else
            {
                lobby.Players.Add(new GameProfile
                {
                    UserProfileId = UserProfileService.CurrentUserProfile.Id,
                    DisplayName = UserProfileService.CurrentUserProfile.DisplayName,
                    PhotoUrl = UserProfileService.CurrentUserProfile.AvatarUrl,
                    GameId = lobby.Id
                });
            }
        }

        IsAdmin = (lobby.AdminUserId == CurrentUserId);

        _hubConnection = new HubConnectionBuilder()
            .WithUrl("https://api.telegramrps.ru/lobbyhub") // укажи правильный URL хаба
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<GameLobby>("LobbyUpdated", (updatedLobby) =>
        {
            // Обновляем локальное состояние
            lobby = updatedLobby;
            IsAdmin = (lobby.AdminUserId == CurrentUserId);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();

        await _hubConnection.SendAsync("JoinLobby", LobbyId, CurrentUserId.Value);

        IsLoading = false;
    }

    private string SliderBackground =>
    $"linear-gradient(90deg, #EE5A24 {SliderPercent}%, #21262D {SliderPercent}%)";

    private string SliderPercent => ((settingSelectedMaxPlayers - 2) * 25).ToString();

    private async Task LeaveLobby()
    {
        if (_hubConnection is not null && _hubConnection.State == HubConnectionState.Connected)
        {
            await _hubConnection.SendAsync("LeaveLobby", LobbyId, CurrentUserId);
            await _hubConnection.StopAsync();
        }
        NavigationManager.NavigateTo("/");
    }

    private async Task OnSliderChange(ChangeEventArgs e)
    {
        settingSelectedMaxPlayers = int.Parse(e.Value?.ToString() ?? "4");

        valueBump = true;
        StateHasChanged();

        await Task.Delay(150);
        valueBump = false;
        StateHasChanged();
    }

    private async Task SaveSettings()
    {
        if (_hubConnection is null || _hubConnection.State != HubConnectionState.Connected)
            return;

        lobby.Mode = settingSelectedMode;
        lobby.Deck = settingSetectedDect;
        lobby.MaxPlayers = settingSelectedMaxPlayers;
        await _hubConnection.SendAsync("UpdateLobbySettings", lobby);
        await CancelEdit();
    }

    private void SelectMode(GameMode mode) => settingSelectedMode = mode;

    private void SelectCardCount(DeckType dectType) => settingSetectedDect = dectType;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task CancelEdit()
    {
        settingSelectedMode = lobby.Mode;
        settingSetectedDect = lobby.Deck;
        settingSelectedMaxPlayers = lobby.MaxPlayers;
        _isClosing = true;
        StateHasChanged();
        await Task.Delay(200);
        _isSettingsModalVisible = false;
        _isClosing = false;
    }

    private void OpenSettings()
    {
        _isSettingsModalVisible = true;
    }
}
