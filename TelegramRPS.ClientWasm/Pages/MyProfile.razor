@page "/profile"
@using TelegramRPS.ClientWasm.Services
@inject IJSRuntime js
@inject UserProfileService UserProfileService
@inject TelegramInterop TelegramInterop
@inject TelegramAuthService TelegramAuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http


@if (UserProfileService.CurrentUserProfile != null)
{
    <div class="my-profile-container">
        <img src="images/MyProfile/back.png" alt="Назад" class="back-button" @onclick="GoBack" />
        <h1 class="profile-title">Профиль</h1>

        <div class="profile-avatar-wrapper">
            <img class="profile-avatar" src="@displayedAvatar" alt="Avatar" />
        </div>

        <label class="avatar-edit-button" for="avatarInput">
            <img src="images/MyProfile/editAvatar.png" alt="Edit" />
        </label>
        <InputFile id="avatarInput" style="display:none" OnChange="OnFileSelected" accept="image/png,image/jpeg" />


        @if (previewUrl != null)
        {
            <div class="avatar-preview-container">
                <img src="@previewUrl" alt="Preview" style="max-width:150px; max-height:150px; border-radius:50%;" />
                <div class="avatar-preview-buttons">
                    <button class="btn btn-success" @onclick="UploadAvatar" disabled="@isUploading">Загрузить</button>
                    <button class="btn btn-secondary" @onclick="CancelPreview" disabled="@isUploading">Отмена</button>
                </div>
            </div>
        }

        @if (isUploading)
        {
            <p>Загрузка...</p>
        }

        <div class="profile-section name-edit-section">
            <span class="profile-display-name">
                @UserProfileService.CurrentUserProfile?.DisplayName
            </span>
            <button class="edit-button" @onclick="ShowEditNameModel">Изменить</button>
        </div>

        @if (_isEditModalVisible)
        {
            <div class="modal-overlay">
                <div class="modal-content">
                    <input type="text" class="edit-input" @bind="_editedName" />
                    <button class="apply-button" @onclick="ApplyNewName">Применить</button>
                </div>
            </div>
        }

    </div>
}
else
{
    <p>Загрузка профиля...</p>
}

@code {
    private bool _isEditModalVisible = false;
    private string _editedName = "";
    private string? previewUrl;
    private bool isUploading = false;
    private IBrowserFile? selectedFile;

    private string displayedAvatar =>
        previewUrl ?? UserProfileService.CurrentUserProfile?.AvatarUrl ?? "images/default-avatar.png";


    protected override async Task OnInitializedAsync()
    {
        UserProfileService.OnUserProfileChanged += StateHasChanged;

        if (UserProfileService.CurrentUserProfile == null)
        {
            var data = await TelegramInterop.GetTelegramUserDataAsync();
            if (data?.User != null)
            {
                await TelegramAuthService.SetTelegramUser(data.User);
                await UserProfileService.AuthenticateAsync(
                    TelegramAuthService.CurrentTelegramUser.Id,
                    TelegramAuthService.CurrentTelegramUser.FirstName,
                    TelegramAuthService.CurrentTelegramUser.LastName,
                    TelegramAuthService.CurrentTelegramUser.Username,
                    TelegramAuthService.CurrentTelegramUser.PhotoUrl
                );
            }
        }

    }
    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream(1024 * 1024 * 5);
            var buffer = new byte[selectedFile.Size];
            await stream.ReadAsync(buffer);

            previewUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    private void CancelPreview()
    {
        previewUrl = null;
        selectedFile = null;
    }

    private async Task UploadAvatar()
    {
        if (selectedFile == null)
            return;

        isUploading = true;

        try
        {
            var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(selectedFile.OpenReadStream(1024 * 1024 * 15));
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(streamContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("api/profile/avatar", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadAvatarResponse>();
                if (result != null)
                {
                    UserProfileService.CurrentUserProfile.AvatarUrl = result.Url;
                    await UserProfileService.UpdateUserProfileAsync(UserProfileService.CurrentUserProfile);
                    previewUrl = null;
                    selectedFile = null;
                }
            }
            else
            {
                // Можно добавить уведомление об ошибке
            }
        }
        finally
        {
            isUploading = false;
        }
    }

    private void ShowEditNameModel()
    {
        _editedName = UserProfileService.CurrentUserProfile.DisplayName;
        _isEditModalVisible = true;
    }

    private async Task ApplyNewName()
    {
        await UserProfileService.UpdateUserNameAsync(_editedName);
        _isEditModalVisible = false;
    }

    public void Dispose()
    {
        UserProfileService.OnUserProfileChanged -= StateHasChanged;
    }
    private void GoBack()
    {
        NavigationManager.NavigateTo("/");
    }
}
