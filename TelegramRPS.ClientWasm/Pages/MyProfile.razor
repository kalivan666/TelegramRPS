@page "/profile"
@layout MainLayout

@using TelegramRPS.ClientWasm.Services
@using TelegramRPS.ClientWasm.Shared
@using TelegramRPS.Shared.Models.Profile

@inject IJSRuntime js
@inject UserProfileService UserProfileService
@inject TelegramInterop TelegramInterop
@inject TelegramAuthService TelegramAuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http

<div class="my-profile-container">
    @if (IsLoading)
    {
        <p>Загрузка...</p>
    }
    else if (!IsAuthorized)
    {
        <TelegramAuthRequired />
    }
    else
    {
        <img src="images/MyProfile/back.png" alt="Назад" class="back-button" @onclick="GoBack" />
        <h1 class="profile-title">Профиль</h1>

        <div class="profile-avatar-wrapper">
            <img class="profile-avatar" src="@displayedAvatar" alt="Avatar" />
        </div>

        <label class="avatar-edit-button" for="avatarInput">
            <img src="images/MyProfile/editAvatar.png" alt="Edit" />
        </label>
        <InputFile id="avatarInput" style="display:none" OnChange="OnFileSelected" accept="image/png,image/jpeg" />

        <!-- окно изменения аватарки -->
        @if (_isAvatarModalVisible && previewUrl != null)
        {
            <div class="modal-overlay" @onclick="CancelEdit">
                <div class="avatar-modal-content @( _isClosing ? "modalFadeOut" : "" )" @onclick:stopPropagation>
                    <div class="avatar-modal-title">Новая аватарка</div>
                    <img class="avatar-preview" src="@previewUrl" alt="Preview" />

                    <div class="avatar-modal-buttons">
                        <button class="confirm-button" @onclick="UploadAvatar" disabled="@isUploading">Применить</button>
                        <button class="cancel-button-avatar" @onclick="CancelEdit" disabled="@isUploading">Отмена</button>
                    </div>
                </div>
            </div>
        }

        @if (isUploading)
        {
            <p>Загрузка...</p>
        }

        <!-- Имя профиля -->
        <div class="profile-section name-edit-section">
            <span class="profile-display-name">
                @UserProfileService.CurrentUserProfile?.DisplayName
            </span>
            <button class="edit-button" @onclick="ShowEditNameModel">Изменить</button>
        </div>

        <!-- Окно изменения имени профиля -->
        @if (_isEditModalVisible)
        {
            <div class="modal-overlay" @onclick="CancelEdit">
                <div class="modal-content @( _isClosing ? "modalFadeOut" : "" )" @onclick:stopPropagation>
                    <div class="modal-title">Изменить имя профиля</div>
                    <input type="text" class="edit-input" @bind="_editedName" />
                    <div class="modal-buttons">
                        <button class="apply-button" @onclick="ApplyNewName">Применить</button>
                        <button class="cancel-button" @onclick="CancelEdit">Отмена</button>
                    </div>
                </div>
            </div>
        }


        <!-- Статистика игр -->
        <div class="game-stats-container">
            <div class="game-stats-title">Статистика</div>

            <div class="game-stats-row">
                <span class="game-stats-label">Игр сыграно:</span>
                <span class="game-stats-value">@UserProfileService.CurrentUserProfile.GameStats.GamesPlayed</span>
            </div>

            <div class="game-stats-row">
                <span class="game-stats-label">Побед:</span>
                <span class="game-stats-value">@UserProfileService.CurrentUserProfile.GameStats.Wins</span>
            </div>

            <div class="game-stats-row">
                <span class="game-stats-label">Процент побед:</span>
                <span class="game-stats-value">@UserProfileService.CurrentUserProfile.GameStats.WinRate %</span>
            </div>

            <div class="game-stats-row">
                <span class="game-stats-label">Рейтинг:</span>
                <span class="game-stats-value">@UserProfileService.CurrentUserProfile.GameStats.Rating</span>
            </div>
        </div>

        <!-- Достижения -->
        <div class="achievements-container">
            <div class="achievements-title">Достижения</div>
        </div>

        @if (_showResetProfileModal)
        {
            <div class="modal-overlay" @onclick="CancelEdit">
                <div class="modal-content @(_isClosing ? "modalFadeOut" : "" )" @onclick:stopPropagation>
                    <div class="modal-title">Сбросить профиль?</div>
                    <div class="modal-buttons">
                        <button class="cancel-button" @onclick="CancelEdit">Отмена</button>
                        <button class="confirm-button" @onclick="ConfirmReset">Сбросить</button>
                    </div>
                </div>
            </div>
        }

        <button class="reset-profile-button" @onclick="OpenResetModal">Сбросить профиль</button>
    }
</div>

@code {
    [CascadingParameter]
    public MainLayout MainLayoutInstance { get; set; } = null!;

    private bool _isAvatarModalVisible = false;
    private bool _isEditModalVisible = false;
    private bool _showResetProfileModal = false;
    private bool _isClosing = false;

    private bool IsAuthorized = false;
    private bool IsLoading = false;
    private int? CurrentUserId = null;

    private string _editedName = "";
    private string? previewUrl;
    private bool isUploading = false;
    private IBrowserFile? selectedFile;

    private string displayedAvatar =>
        previewUrl ?? UserProfileService.CurrentUserProfile?.AvatarUrl ?? "images/default-avatar.png";


    protected override async Task OnInitializedAsync()
    {
        UserProfileService.OnUserProfileChanged += StateHasChanged;

        if (UserProfileService.CurrentUserProfile == null)
        {
            var data = await TelegramInterop.GetTelegramUserDataAsync();
            if (data?.User != null)
            {
                await TelegramAuthService.SetTelegramUser(data.User);
                await UserProfileService.AuthenticateAsync(
                    TelegramAuthService.CurrentTelegramUser.Id,
                    TelegramAuthService.CurrentTelegramUser.FirstName,
                    TelegramAuthService.CurrentTelegramUser.LastName,
                    TelegramAuthService.CurrentTelegramUser.Username,
                    TelegramAuthService.CurrentTelegramUser.PhotoUrl
                );
            }
        }

        CurrentUserId = UserProfileService.CurrentUserProfile?.Id;

        // Если не авторизован — показываем компонент авторизации через Telegram
        if (CurrentUserId == null)
        {
            IsAuthorized = false;
            IsLoading = false;
            return;
        }

        IsAuthorized = true;
        IsLoading = false;
    }

    private async Task CancelEdit()
    {
        _isClosing = true;
        StateHasChanged(); // нужно отрисовать с новым классом

        await Task.Delay(200); // ждём завершения анимации

        //имя профиля
        _isEditModalVisible = false;

        //смена аватара
        previewUrl = null;
        selectedFile = null;
        _isAvatarModalVisible = false;

        //сброс профиля
        _showResetProfileModal = false;

        _isClosing = false;
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile != null)
        {
            using var stream = selectedFile.OpenReadStream(1024 * 1024 * 5);
            var buffer = new byte[selectedFile.Size];
            await stream.ReadAsync(buffer);

            previewUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
            _isAvatarModalVisible = true;
        }
    }

    private async Task UploadAvatar()
    {
        if (selectedFile == null)
            return;

        isUploading = true;

        try
        {
            var content = new MultipartFormDataContent();
            var streamContent = new StreamContent(selectedFile.OpenReadStream(1024 * 1024 * 15));
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(streamContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("api/profile/upload-avatar", content);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<UploadAvatarResponse>();
                if (result != null)
                {
                    UserProfileService.CurrentUserProfile.AvatarUrl = Http.BaseAddress + result.Url;
                    await UserProfileService.UpdateUserProfileAsync(UserProfileService.CurrentUserProfile);
                    await CancelEdit();
                }
            }
            else
            {
                // Можно добавить уведомление об ошибке
            }
        }
        finally
        {
            isUploading = false;
        }
    }

    private void ShowEditNameModel()
    {
        _editedName = UserProfileService.CurrentUserProfile.DisplayName;
        _isEditModalVisible = true;
    }

    private void OpenResetModal()
    {
        _showResetProfileModal = true;
    }

    private async Task ConfirmReset()
    {
        await CancelEdit();
        UserProfileService.CurrentUserProfile.GameStats = new UserGameStats();
        await UserProfileService.UpdateUserProfileAsync(UserProfileService.CurrentUserProfile);
    }

    private async Task ApplyNewName()
    {
        await UserProfileService.UpdateUserNameAsync(_editedName);
        _isEditModalVisible = false;
    }

    public void Dispose()
    {
        UserProfileService.OnUserProfileChanged -= StateHasChanged;
    }
    private async Task GoBack()
    {
        if (MainLayoutInstance != null)
            await MainLayoutInstance.NavigateWithAnimation("/");
        else
            NavigationManager.NavigateTo("/");
    }
}
